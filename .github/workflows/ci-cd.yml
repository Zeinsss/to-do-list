name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up Node.js environment
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'  # specify your Node.js version here

    # Install dependencies
    - name: Install dependencies
      run: |
        npm install

    # Run tests (if any)
    - name: Run tests
      run: |
        npm test  # Assuming you have test scripts defined in package.json

  # Docker Build and Push to ECR (Optional for Docker Deployment)
  deploy:
    runs-on: ubuntu-latest
    needs: build # Ensures deployment happens after build is successful

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2  # Set your AWS region here

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker image
      run: |
        docker build -t my-app-image .

    - name: Push Docker image to ECR
      run: |
        docker tag my-app-image:latest ${{ secrets.AWS_ECR_REPOSITORY_URI }}:latest
        docker push ${{ secrets.AWS_ECR_REPOSITORY_URI }}:latest

  # Deploy the application to an EC2 instance (SSH)
  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: deploy  # Ensures this happens after Docker push

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up SSH key for EC2 access
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

    # Ensure Docker is running on EC2 (skip if it's already set up)
    - name: Set up Docker on EC2
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << EOF
          if ! command -v docker &> /dev/null
          then
            echo "Docker not found. Installing..."
            sudo apt-get update && sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
          fi
        EOF

    - name: Deploy to EC2
      env:
        MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
        MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
        MYSQL_USER: ${{ secrets.MYSQL_USER }}
        MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        MYSQL_DB: ${{ secrets.MYSQL_DB }}
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << EOF
          # Navigate to the app directory
          cd /path/to/app
          
          # Pull the latest image from ECR
          docker pull ${{ secrets.AWS_ECR_REPOSITORY_URI }}:latest
          
          # Stop and remove any existing container
          docker stop app || true
          docker rm app || true

          # Run the new container with environment variables
          docker run --env MYSQL_HOST=${MYSQL_HOST} \
                     --env MYSQL_PORT=${MYSQL_PORT} \
                     --env MYSQL_USER=${MYSQL_USER} \
                     --env MYSQL_PASSWORD=${MYSQL_PASSWORD} \
                     --env MYSQL_DB=${MYSQL_DB} \
                     -d -p 80:3000 --name app ${{ secrets.AWS_ECR_REPOSITORY_URI }}:latest
        EOF
