name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY_URI: ${{ secrets.AWS_ECR_REPOSITORY_URI }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  terraform:
    runs-on: ubuntu-latest
    needs: build  # Ensure Terraform runs after the build is successful

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0  # Specify the Terraform version
      - name: Terraform Login to Terraform Cloud
        working-directory: ./terraform
        run: terraform login ${{ secrets.TF_API_TOKEN }}


      - name: Initialize Terraform
        working-directory: ./terraform
        run: terraform init

      - name: Validate Terraform configuration
        working-directory: ./terraform
        run: terraform validate

      - name: Plan Terraform deployment
        working-directory: ./terraform
        run: terraform plan -out=tfplan -var-file=terraform.tfvars

      - name: Apply Terraform deployment
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        working-directory: ./terraform
        run: terraform apply -input=false tfplan

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker image
        run: |
          docker build -t my-app-image .
          docker tag my-app-image:latest ${{ env.ECR_REPOSITORY_URI }}:latest
          docker push ${{ env.ECR_REPOSITORY_URI }}:latest

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH key for EC2
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Deploy Application to EC2
        env:
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DB: ${{ secrets.MYSQL_DB }}
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            echo "Deploying application to EC2 instance..."

            # Ensure Docker is installed
            if ! command -v docker &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            fi

            # Clean up old images
            docker image prune -f

            # Pull latest image
            docker pull ${{ env.ECR_REPOSITORY_URI }}:latest

            # Stop and remove the old container
            docker stop app || true
            docker rm app || true

            # Start the new container
            docker run --env MYSQL_HOST=${MYSQL_HOST} \
                       --env MYSQL_PORT=${MYSQL_PORT} \
                       --env MYSQL_USER=${MYSQL_USER} \
                       --env MYSQL_PASSWORD=${MYSQL_PASSWORD} \
                       --env MYSQL_DB=${MYSQL_DB} \
                       -d -p 80:3000 --name app ${{ env.ECR_REPOSITORY_URI }}:latest

            echo "Application deployed successfully!"
          EOF
